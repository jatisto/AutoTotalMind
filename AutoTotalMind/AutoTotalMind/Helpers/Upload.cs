using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Drawing;
using System.Drawing.Imaging;

public class Upload
{
    /// <summary>
    /// Upload Image File
    /// </summary>
    /// <param name="image">Image you wish to upload</param>
    /// <param name="uploadPath">Path of where you want to save the image</param>
    /// <param name="fileName">Out Parameter: The filename generated by the method</param>
    /// <param name="newWidth">New width of the image, ignore if you wish to keep the size</param>
    /// <param name="randomName">True if you wish to generate a random name</param>
    /// <returns>True if the image was uploaded successfully</returns>
    public static bool Image(HttpPostedFileBase image, string uploadPath, out string fileName, int newWidth = 0, bool randomName = true)
    {
        if (image == null)
        {
            fileName = string.Empty;
            return false;
        }

        fileName = image.FileName;

        string extension = (new FileInfo(fileName)).Extension.ToLower();

        string[] acceptableExtensions = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
        if (!acceptableExtensions.Contains(extension))
        {
            return false;
        }

        if (randomName) fileName = GenRndName() + extension;

        if (newWidth > 0)
        {
            Image img = System.Drawing.Image.FromStream(image.InputStream);

            using (Bitmap bm = new Bitmap(img))
            {
                int newHeight = (bm.Height * newWidth) / bm.Width;
                Bitmap resized = new Bitmap(newWidth, newHeight);
                using (Graphics g = Graphics.FromImage(resized))
                {
                    g.DrawImage(bm, new Rectangle(0, 0, resized.Width, resized.Height), 0, 0, bm.Width, bm.Height, GraphicsUnit.Pixel);
                    g.Dispose();
                }
                bm.Dispose();

                resized.Save(Path.Combine(uploadPath, fileName), GetFormat(extension));
            }
        }
        else
        {
            image.SaveAs(Path.Combine(uploadPath, fileName));
        }

        return true;
    }

    /// <summary>
    /// Upload Image File
    /// </summary>
    /// <param name="image">Image you wish to upload</param>
    /// <param name="uploadPath">Path of where you want to save the image</param>
    /// <param name="fileName">Out Parameter: The filename generated by the method</param>
    /// <param name="newWidth">New width of the image, ignore if you wish to keep the size</param>
    /// <param name="randomName">True if you wish to generate a random name</param>
    /// <returns>True if the image was uploaded successfully</returns>
    public static bool Image(HttpPostedFileBase image, string uploadPath, string fileName, int newWidth = 0)
    {
        if (image == null) return false;
        string extension = (new FileInfo(fileName)).Extension.ToLower();

        string[] acceptableExtensions = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
        if (!acceptableExtensions.Contains(extension))
        {
            return false;
        }

        if (newWidth > 0)
        {
            Image img = System.Drawing.Image.FromStream(image.InputStream);

            using (Bitmap bm = new Bitmap(img))
            {
                int newHeight = (bm.Height * newWidth) / bm.Width;
                Bitmap resized = new Bitmap(newWidth, newHeight);
                using (Graphics g = Graphics.FromImage(resized))
                {
                    g.DrawImage(bm, new Rectangle(0, 0, resized.Width, resized.Height), 0, 0, bm.Width, bm.Height, GraphicsUnit.Pixel);
                    g.Dispose();
                }
                bm.Dispose();

                resized.Save(Path.Combine(uploadPath, fileName), GetFormat(extension));
            }
        }
        else
        {
            image.SaveAs(Path.Combine(uploadPath, fileName));
        }

        return true;
    }

    private static string GenRndKeys(int amount)
    {
        string strKey =
            "a b c d e f g h i j k l m n o p q r s t u v x y z 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V X Y Z";

        string[] arrKey = { };
        string rndString = "";

        arrKey = strKey.Split(' ');

        int intMax = arrKey.Length;
        int intMin = 1;

        Random rnd = new Random();

        for (int i = 0; i < amount; i++)
        {
            rndString += arrKey[rnd.Next(intMin, intMax)];
        }

        return rndString;
    }
    private static string GenRndName()
    {
        DateTime d = DateTime.Now;
        string name = d.Day + GenRndKeys(7) + d.Year + GenRndKeys(7) + d.Month;

        return name;
    }
    private static ImageFormat GetFormat(string extension)
    {
        switch (extension)
        {
            case ".png":
                return ImageFormat.Png;
            case ".jpg":
            case ".jpeg":
                return ImageFormat.Jpeg;
            case ".gif":
                return ImageFormat.Gif;
            default:
                return null;
        }
    }
    private static ImageCodecInfo GetEncoderInfo(string mimeType)
    {
        int j;
        ImageCodecInfo[] encoders;
        encoders = ImageCodecInfo.GetImageEncoders();
        for (j = 0; j < encoders.Length; ++j)
        {
            if (encoders[j].MimeType == mimeType)
                return encoders[j];
        }
        return null;
    }
}